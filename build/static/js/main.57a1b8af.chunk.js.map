{"version":3,"sources":["components/InfoBoxes.js","components/Table.js","utils.js","components/Map.js","components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isactive","total","caseType","props","Card","className","onClick","CardContent","Typography","color","Table","countries","map","country","numeral","format","sortData","data","sort","a","b","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","casesTypeColors","hex","multiplier","recovered","deaths","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","prettyPrintStat","stat","Map","mapCountries","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","selectedCountry","setSelectedCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMApZoom","setMapCountries","setCaseType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","key","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57a1b8af.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\nimport \"../styles/InfoBox.css\"\n\nfunction InfoBox({ title, cases, isactive, total, caseType, ...props }){\n    return (\n        <Card className={`infoBox ${caseType} ${isactive && \"infoBox--selected\"}`}\n            onClick={props.onClick}\n        >\n            <CardContent>\n                <Typography className={`infoBox__title ${caseType} `} color=\"textSecondary\">\n                    {title}\n                </Typography>\n                \n                <h2 className={`infoBox__cases ${caseType} `}>{cases}</h2>\n\n                <Typography className=\"infoBox__total\">\n                    {total} total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox","import React from 'react'\nimport '../styles/Table.css'\nimport numeral from 'numeral'\n\nfunction Table({ countries }){\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format()}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table","import React from \"react\"; //we import this because we would be using JSX in th map util\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\"; //this would be used for the circles and tooltip\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\n}\n\nexport const buildChartData = (data, caseType=\"cases\") => {\n    const chartData = [];\n    let lastDataPoint;\n    \n    for (let date in data.cases) {\n\n        if(lastDataPoint) {\n            const newDataPoint = {\n                x: date,\n                y: data[caseType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[caseType][date];\n    }\n    return chartData\n}\n\n//Draw ciircles on maps with interactive tooltips\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multiplier: 2000,\n    },\n}\n\nexport const showDataOnMap = (data, caseType=\"cases\") =>\n        data.map((country) => (\n            <Circle\n                center={[ country.countryInfo.lat, country.countryInfo.long ]}\n                // setMapCenter({lat:data.countryInfo.lat, lng:data.countryInfo.long})\n                fillOpacity={0.4}\n                color={casesTypeColors[caseType].hex}\n                fillColor={casesTypeColors[caseType].hex}\n                radius={\n                    Math.sqrt(country[caseType]) * casesTypeColors[caseType].multiplier\n                }\n            >\n                <Popup>\n                    <div className=\"info-container\">\n                        <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\n                        <div className=\"info-name\">{ country.country }</div>\n                        <div className=\"info-cases\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                        <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                        <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                    </div>\n                </Popup>\n            </Circle>\n        ))\n\n//optional configs for the line graph\nexport const options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\")\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"Ba\");\n                    },\n                },\n            },\n        ],\n    },\n}\n\n\n//returns a nicely formated number for infoBox display\nexport const prettyPrintStat = (stat) => \n    (\n        stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"\n    )\n","import React from 'react'\nimport '../styles/Map.css'\nimport { showDataOnMap } from \"../utils\"\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\"\n\nfunction Map({ mapCountries, center, zoom, caseType }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n            <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n            />\n                {showDataOnMap(mapCountries, caseType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map","import React, {useState, useEffect} from 'react'\nimport { Line } from \"react-chartjs-2\"\nimport { buildChartData, options } from \"../utils\"\n\n\nfunction LineGraph({ caseType = \"cases\" }) {\n    const [data, setData] = useState({});\n\n    useEffect (() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then(response => response.json())\n                .then(response => {\n                    const chartData = buildChartData(response, caseType)\n                    setData(chartData)\n                })\n        }\n        fetchData();\n    }, [caseType]);\n\n    return (\n        <div className=\"line--graph\">\n            {data?.length > 0 && (\n                <Line \n                options={options}           \n                data={{ \n                    datasets: [\n                        {\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                            borderColor: \"#CC1034\",\n                            data: data,\n                        }\n                    ]\n                }}\n                >\n\n                </Line>\n            )}\n        </div>\n    )\n}\n\nexport default LineGraph","import React, { useState, useEffect } from \"react\";\nimport { FormControl, MenuItem, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBoxes\";\nimport Table from \"./components/Table\"\nimport Map from \"./components/Map\";\nimport LineGraph from \"./components/LineGraph\"\nimport { sortData, prettyPrintStat } from \"./utils\"\nimport \"leaflet/dist/leaflet.css\"; //css file for the leaflet map\nimport \"./styles/Header.css\";\nimport \"./App.css\";\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 })\n  const [mapZoom, setMApZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n  const [caseType, setCaseType] = useState('cases')\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {setCountryInfo(data)})\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country?.country,\n            value: country.countryInfo?.iso2,\n          }));\n\n          const sortedData = sortData(data) //returns a sorted data based on the cases\n          setTableData(sortedData)\n          setCountries(countries);\n          setMapCountries(data); //we need the complete country data to plot circles on the map\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    if (countryCode==='worldwide') {\n      setMApZoom(2) \n    }\n    else{\n      let url =\n        countryCode === \"worldwide\"\n          ? \"https://disease.sh/v3/covid-19/countries/\"\n          : `https://disease.sh/v3/covid-19/countries/${countryCode}`; //this is a tenary oparator, so we can make an Api call to a different url when the user selects the worldwide option\n   \n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setSelectedCountry(countryCode);\n          setCountryInfo(data) // set the countryinfo state to the country the user selects on the dropdown menu\n\n          console.log(data)\n          setMapCenter({lat:data.countryInfo.lat, lng:data.countryInfo.long})\n          setMApZoom(4)\n        })\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1 className=\"app__header\">COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={selectedCountry}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">worldwide</MenuItem>\n              {countries.map((country) => {\n                return (\n                  <MenuItem key={country.value} value={country.value}>\n                    {country.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox caseType=\"cases\" isactive={caseType === 'cases'} title=\"Coronavirus Cases\" onClick={e => setCaseType('cases')} cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox caseType=\"recovered\" isactive={caseType === 'recovered'} title=\"Recovered\" onClick={e => setCaseType('recovered')} cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox caseType=\"deaths\" isactive={caseType === 'deaths'} title=\"Deaths\" onClick={e => setCaseType('deaths')} cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n\n        <Map \n          mapCountries={mapCountries} center={mapCenter} zoom={mapZoom} caseType={caseType}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h1>Live Cases by Country</h1>\n          <Table countries={tableData} />\n            <h1>World Wide new {caseType}</h1>\n        </CardContent>\n\n        <LineGraph caseType={caseType} />\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}